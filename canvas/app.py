from flask import Flask, request, jsonify, render_template
import os, shutil, json
import tempfile
from flask_socketio import SocketIO
import time
app_start_time = time.time()
import mido
import threading

global_current_time = 0.0

lock = threading.Lock()

app = Flask(__name__, static_folder='static', template_folder='templates')
socketio = SocketIO(app, cors_allowed_origins="*")

# –û—á–∏—Å—Ç–∫–∞ data.json –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
@app.route('/')
def index():
    return render_template('live_canvas.html')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –∏–∑ json_library
@app.route('/list-songs')
def list_songs():
    songs_dir = 'static/json_library'
    songs = [f.replace('.json', '') for f in os.listdir(songs_dir) if f.endswith('.json')]
    return jsonify({"songs": songs})


# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –≤ —Ä–∞–±–æ—á–∏–π data.json
@app.route('/load-song', methods=['POST'])
def load_song():
    song_name = request.json.get('song')
    src = f'static/json_library/{song_name}.json'
    dst = 'static/notes/data.json'
    try:
        with open(src, 'r') as f:
            song_data = json.load(f)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —É –∫–∞–∂–¥–æ–π –Ω–æ—Ç–µ
        for note in song_data.get("originalNotes", []):
            if "time" not in note or "instrument" not in note:
                return jsonify({"error": "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: –∫–∞–∂–¥–æ–π –Ω–æ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å 'time' –∏ 'instrument'."}), 400
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ "played" –∏–∑ originalNotes, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        for note in song_data.get("originalNotes", []):
            note.pop("played", None)

        # –û—á–∏—â–∞–µ–º studentNotes –ø–æ–ª–Ω–æ—Å—Ç—å—é
        song_data["studentNotes"] = []
        global app_start_time
        # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏
        app_start_time = time.time()

        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ studentNotes –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ data.json
        if os.path.exists(dst):
            try:
                with open(dst, 'r') as f:
                    existing = json.load(f)
                existing["studentNotes"] = []
                print("‚è±Ô∏è app_start_time —Å–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏")
                with open(dst, 'w') as f:
                    json.dump(existing, f, indent=2)
                print("üßπ –°—Ç–∞—Ä—ã–µ studentNotes –æ—á–∏—â–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏.")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ studentNotes: {e}")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ—Ç: {len(song_data['originalNotes'])}")
        print(f"üéº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º song_data –≤ data.json —Å {len(song_data['originalNotes'])} –Ω–æ—Ç–∞–º–∏")
        with open(dst, 'w') as f:
            json.dump(song_data, f, indent=2)
            print("üì• –ù–æ–≤—ã–π data.json —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω")
        return jsonify({"message": f"–ü–µ—Å–Ω—è {song_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞"})
    except FileNotFoundError:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@socketio.on("student_hit")
def handle_student_hit(data):
    # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ socketio.emit –∏–∑ midi_listener()
    # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print(f"ü•Å –ü–æ–ª—É—á–µ–Ω —É–¥–∞—Ä: {data}")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ MIDI –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
from werkzeug.utils import secure_filename
import pretty_midi

@app.route('/upload-midi', methods=['POST'])
def upload_midi():
    file = request.files.get('file')
    song_name = request.form.get('name')

    if not file or not song_name:
        return jsonify({"error": "–§–∞–π–ª –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    filename = secure_filename(file.filename)
    midi_path = f'static/uploads/{filename}'
    json_path = f'static/json_library/{song_name}.json'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º MIDI
    file.save(midi_path)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ MIDI –≤ JSON
        midi = pretty_midi.PrettyMIDI(midi_path)
        drum_notes = []
        DRUM_MAP = {
            36: "kick", 38: "snare", 40: "snare",
            42: "hihat", 46: "hihat"
        }

        print(f"üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ—Ä–æ–∂–µ–∫: {len(midi.instruments)}")
        for instr in midi.instruments:
            print(f"üéµ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {instr.name if instr.name else '–ë–µ–∑ –∏–º–µ–Ω–∏'} | is_drum={instr.is_drum} | notes={len(instr.notes)}")
            if True:  # –≤—Ä–µ–º–µ–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Ä–æ–∂–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ is_drum=False
                for note in instr.notes:
                    print(f"    ü•Å –ù–æ—Ç–∞: pitch={note.pitch}, start={note.start}")
                    if note.pitch in DRUM_MAP:
                        drum_notes.append({
                            "time": round(note.start, 3),
                            "instrument": DRUM_MAP[note.pitch]
                        })

        bpm_changes = midi.get_tempo_changes()[1]
        bpm = round(bpm_changes[0]) if len(bpm_changes) > 0 else 120

        output = {
            "BPM": bpm,
            "originalNotes": sorted(drum_notes, key=lambda x: x["time"])
        }

        for note in output.get("originalNotes", []):
            note.pop("played", None)

        with open(json_path, 'w') as f:
            json.dump(output, f, indent=2)

        # –û—á–∏—Å—Ç–∏–º –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º data.json —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏
        output["studentNotes"] = []
        file_path = 'static/notes/data.json'
        with open(file_path, 'w') as f:
            json.dump(output, f, indent=2)

        return jsonify({"message": f"–ü–µ—Å–Ω—è '{song_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É."})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@socketio.on("beat_position")
def handle_beat_position(time_position):
    global global_current_time
    global_current_time = time_position

# MIDI listener in a separate thread
def midi_listener():
    try:
        with mido.open_input() as port:
            print("üéπ MIDI-–≤—Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç. –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...")
            for msg in port:
                if msg.type == 'note_on' and msg.velocity > 0:
                    socketio.emit('student_hit', {
                        'note': msg.note,
                        'time': time.time()
                    })

                    # --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ data.json ---
                    file_path = 'static/notes/data.json'
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ note –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    midi_to_instrument = {
                        36: "kick",
                        38: "snare",
                        42: "hihat",
                        40: "snare",
                        46: "hihat"
                    }
                    instrument = midi_to_instrument.get(msg.note, "unknown")

                    now = time.time()
                    current_time = round(global_current_time, 3)
                    if current_time == 0.0:
                        continue  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ—Ç—ã —Å –Ω—É–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                    data = {
                        "note": msg.note,
                        "instrument": instrument,
                        "time": current_time
                    }
                    with lock:
                        try:
                            if os.path.exists(file_path):
                                try:
                                    with open(file_path, 'r') as f:
                                        existing = json.load(f)
                                except json.JSONDecodeError:
                                    print("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π JSON. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é.")
                                    existing = {
                                        "originalNotes": [],
                                        "studentNotes": []
                                    }
                            else:
                                existing = {
                                    "originalNotes": [],
                                    "studentNotes": []
                                }

                            existing.setdefault("studentNotes", []).append(data)

                            matched = False
                            for original in existing.get("originalNotes", []):
                                if original["instrument"] == instrument and abs(original["time"] - current_time) <= 0.2:
                                    data["hit"] = True
                                    original["matched"] = True
                                    matched = True
                                    break
                            if not matched:
                                data["hit"] = False

                            with tempfile.NamedTemporaryFile('w', delete=False, dir='static/notes', suffix='.json') as tf:
                                json.dump(existing, tf, indent=2)
                                tf.flush()
                                os.fsync(tf.fileno())
                                temp_name = tf.name
                            os.replace(temp_name, file_path)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ MIDI-–≤—Ö–æ–¥–∞: {e}")


if __name__ == '__main__':
    threading.Thread(target=midi_listener, daemon=True).start()
    socketio.run(app, debug=True)