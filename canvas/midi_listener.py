import mido
import time
import requests
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –∏–º—è MIDI-–≤—Ö–æ–¥–∞
MIDI_INPUT_NAME = '‚Äì√Æ‚Äî√Ñ‚Äì‚àû‚ÄìœÄ‚Äì‚â§‚Äì¬µ‚Äî√Ñ IAC IAC Input'
N8N_WEBHOOK_URL = 'http://localhost:5678/webhook-test/student-midi'

# –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ –Ω–æ—Ç ‚Üí –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
NOTE_TO_INSTRUMENT = {
    36: 'kick',
    38: 'snare',
    40: 'snare',
    42: 'hihat',
    46: 'hihat',
    49: 'crash',
    51: 'ride',
    45: 'tom',
    48: 'tom',
    41: 'floor tom'
}

print("üîÅ MIDI-–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

start_time = None
reset_requested = False

import socketio
sio = socketio.Client()

try:
    sio.connect('http://localhost:5000')
    print("üì° Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    print(f"‚ùå Socket.IO –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

@sio.on('start_canvas_now')
def handle_start_canvas():
    global start_time
    start_time = time.time()
    print("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –∫–∞–Ω–≤—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è reset_timer
@sio.on('reset_timer')
def handle_reset_timer():
    global start_time
    start_time = None
    print("üîÑ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω (reset_timer)")

@sio.on('reset_canvas_timer')
def handle_reset_canvas_timer():
    global start_time
    start_time = None
    print("‚èπÔ∏è –¢–∞–π–º–µ—Ä studentNotes —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–Ω–∏")

try:
    with mido.open_input(MIDI_INPUT_NAME) as inport:
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {MIDI_INPUT_NAME}")

        for msg in inport:
            if msg.type == 'note_on' and msg.velocity > 0:
                if start_time is None:
                    continue
                elapsed = round(time.time() - start_time, 3)
                if elapsed == 0.0:
                    print("‚ö†Ô∏è –£–¥–∞—Ä –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ 0.0")
                    continue
                instrument = NOTE_TO_INSTRUMENT.get(msg.note, 'unknown')

                data = {
                    'note': msg.note,
                    'velocity': msg.velocity,
                    'time': elapsed,
                    'raw_time': time.time(),
                    'instrument': instrument
                }

                file_path = 'data.json'

                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if os.path.exists(file_path):
                        with open(file_path, 'r') as f:
                            existing = json.load(f)
                    else:
                        existing = {
                            "originalNotes": [],
                            "studentNotes": []
                        }


                    # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞—Ä –≤ –º–∞—Å—Å–∏–≤ studentNotes
                    if "studentNotes" not in existing:
                        existing["studentNotes"] = []

                    existing["studentNotes"].append(data)

                    with open(file_path, 'w') as f:
                        json.dump(existing, f, indent=2)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")

                print(f"ü•Å –£–¥–∞—Ä: {data}")
                try:
                    requests.post(N8N_WEBHOOK_URL, json=data)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n: {e}")

except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MIDI: {e}")
